#!/bin/bash
# Bash OctoBot

if [[ -z "${personal_github_token:-}" ]]; then
    echo -e "Error: 'personal_github_token' environment variable not set.\n\nTo resolve this:\n1. Generate a GitHub personal access token with the 'user:follow' and 'read:user' scopes at https://github.com/settings/tokens.\n2. Set the token in your environment with:\n   export personal_github_token=\"your_token_here\"\n3. To make this change permanent, add it to your '~/.bashrc' with:\n   echo 'export personal_github_token=\"your_token_here\"' >> ~/.bashrc\n   source ~/.bashrc\n\nAfter setting up the token, you can run OctoBot commands with:\n   ghbot <command> [username]\n\nFor more details, visit the GitHub repository."
    exit 1
fi
github_user=$(gh api user | jq -r ".login")
if [[ -z "$github_user" ]]; then
    echo "Error: Unable to retrieve your GitHub username. Please ensure you are authenticated with the GitHub CLI."
    exit 1
fi
follower_counter=0
count_file="/tmp/rate_limit_count"

rate_limit() {
    local count=$(cat "$count_file" 2>/dev/null || echo 0)
    count=$(expr $count + 1)
    local delay=$(expr 60 \* $count)
    echo "Rate limit exceeded. Waiting for ${delay}s ..."
    sleep "$delay"
    echo "$count" > "$count_file"
}

unfollow_user() {
    local user="$1"
    local response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE -H "Authorization: token $personal_github_token" "https://api.github.com/user/following/$user")
    if [[ "$response" == "204" ]]; then
        echo "User: $user has been unfollowed!"
    else
        echo "Error unfollowing $user: $response"
        rate_limit
        unfollow_user "$1"
    fi
}

follow_user() {
    local user="$1"
    local response=$(curl -s -o /dev/null -w "%{http_code}" -X PUT -H "Authorization: token $personal_github_token" "https://api.github.com/user/following/$user")
    if [[ "$response" == "204" ]]; then
        echo "User: $user has been followed!"
        rm -rf $count_file
    else
        echo "Error following $user: $response"
        rate_limit
        follow_user "$1"
    fi
}

fetch_followers() {
    local user="$1"
    local page="$2"
    local followers_url="https://api.github.com/users/$user/followers?page=$page"
    local response=$(curl -s -H "Authorization: token $personal_github_token" "$followers_url")
    if [[ "$response" == *"API rate limit exceeded"* ]]; then
        rate_limit
        fetch_followers "$user" "$page"
    elif [[ -n "$response" ]]; then
        echo "$response"
    else
        echo "Error: Empty response received."
        exit 1
    fi
}

fetch_following() {
    local user="$1"
    local page="$2"
    local following_url="https://api.github.com/users/$user/following?page=$page"
    local response=$(curl -s -H "Authorization: token $personal_github_token" "$following_url")
    if [[ "$response" == *"API rate limit exceeded"* ]]; then
        rate_limit
        fetch_following "$user" "$page"
    elif [[ -n "$response" ]]; then
        echo "$response"
    else
        echo "Error: Empty response received."
        exit 1
    fi
}

cleanup() {
    echo -e "\nOperation completed!"
    exit 0
}

trap cleanup SIGINT

command="$1"
target_user="${2:-}"

followers() {
    following_page=1
    following=()
    while true; do
        response=$(fetch_following "$github_user" "$following_page")
        following_list=($(echo "$response" | jq -r '.[].login'))
        if [[ "${#following_list[@]}" -eq 0 ]]; then
            break
        fi
        following+=("${following_list[@]}")
        following_page=$((following_page + 1))
    done
    page=1
}

if [[ "$command" == "follow" ]]; then
    if [[ -z "$target_user" ]]; then
        read -p "User to fetch? " target_user
    fi
    followers
    page=1
    while true; do
        response=$(fetch_followers "$target_user" "$page")
        follower_list=($(echo "$response" | jq -r '.[].login'))
        if [[ "${#follower_list[@]}" -eq 0 ]]; then
            break
        fi
        follower_counter=$((follower_counter + ${#follower_list[@]}))
        for user in "${follower_list[@]}"; do
            if [[ " ${following[@]} " =~ " $user " || "$user" == "$github_user" ]]; then
                continue
            fi
            follow_user "$user"
        done
        page=$((page + 1))
    done
elif [[ "$command" == "followers" ]]; then
    curl -s -H "Accept: application/json" https://api.github.com/users/$github_user | jq ".followers"
    exit 0
elif [[ "$command" == "unfollow" ]]; then
    followers
    page=1
    while true; do
        response=$(fetch_followers "$github_user" "$page")
        follower_list=($(echo "$response" | jq -r '.[].login'))
        if [[ "${#follower_list[@]}" -eq 0 ]]; then
            break
        fi
        declare -A follower_set
        for follower in "${follower_list[@]}"; do
            follower_set["$follower"]=1
        done
        for user in "${following[@]}"; do
            if [[ -z "${follower_set[$user]}" && "$user" != "$github_user" ]]; then
                unfollow_user "$user"
            fi
        done
        page=$((page + 1))
    done
else
    echo -e "Invalid option: $command\nUsage:\n $0 follow [username] # follow user followers\n $0 followers         # followers count\n $0 unfollow          # unfollow non followers."
    exit 1
fi

cleanup
